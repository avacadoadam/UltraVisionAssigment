- Ensure no threads needed = (Will need in API thread)
- Ensure that all changes to data are updated on the Database ~ will test
- Find a way that theses systems can run side by side  = (Due to implementation of Database). 

-Assumsuptions
- If customer goes to change AccessPlan If current one is more expensive then new there be a fee totaling the differnece
- If customer changes AccessPlan and the disered one is less expensive no fee will be applied
- A customer can only rent one Rental with loyality points and does not effect the max he may have
- The presenter will be sitting on a port waiting for https request find a package that will do that
- the system should not hold any information
- the system should init the databse if the Information is not there
-ensure system is thread safe
-customer may not rent if he has a overdue rental
-A system can change Database or view with no problems to Presenter
- Validates data in View, further in Presenter and also could implement in Modal
- Customer will be charge 50 cent per day he/she is late

Testing ---
Ensure proper ID is given from updateStatement;class :SQLite method ::registerCustomer

TODO  
<<<<<<< HEAD
- find out a java package that can listen to a port
- Find better UML modeling software
- Show all rentals that overdue to system admin (difficult with sqlite3)
- check if customer has overdue Rental then allow(add to uml)!
-Split Database commands based on type of User how may need them
-TIme Coversions
-Update Title to product
-ensure Command Class string formart is correct in order
-Redesign database on functions 
-ensure all ID are int
=======
- Use Exception based problem solving
- Find better UML modeling software
- make database singleton thead safe (Shouldn't be public)
- Show all rentals that are overdue to system admin (difficult with sqlite3)
- check if customer has overdue Rental then allow(add to uml)!
-Split Database commands based on type of User how may need them
-bill customer for late rental billing
- Create Loggin System
- Add benchmarking
- Application Protocol should be jar file that can't be access by either view or Presenter

FINISH API, APPLICATION PROTOCOL,PRESENTER


The ViewPresenterSocket:
shoudl be a interface so the genral system can be preserved if upgraded to a
HTTP web based system.

task
read TDD test driven development
add junit testing
Create flow of every command through system,what info will be needed from database & queries string,then update api documenation lucid chart
Tidy up database Command class along with baseCommand maby based on DML etc
create debuggin clienet register callback with API
finish todo 
think of threaded way where they start
think of the http or socket class linking to api or API being it


<<<<<<< HEAD
=======
-----Activity Diagram-----
Desription---
>>>>>>> 6187c6674570ebebb9a36a09791419f0db2dddaf
