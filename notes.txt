- Ensure no threads needed
- Ensure that all changes to data are updated on the Database
- Find a way that theses systems can run side by side.

-Assumsuptions
- If customer goes to change AccessPlan If current one is more expensive then new there be a fee totaling the differnece
- If customer changes AccessPlan and the disered one is less expensive no fee will be applied
- A customer can only rent one Rental with loyality points and does not effect the max he may have
- The presenter will be sitting on a port waiting for https request find a package that will do that
-Create View
- the system should not hold any information
- the system should init the databse if the Information is not there
-ensure system is thread safe
-customer may not rent if he has a overdue rental
-customer may not rent if is loyality points are neagtive
-customer can not rent if he has over due rentals!!!!!!!!!!!!!!!!!!!!!

Testing ---
Ensure proper ID is given from updateStatement;class :SQLite method ::registerCustomer

TODO  
- find out a java package that can listen to a port
- Find better UML modeling software
- Show all rentals that overdue to system admin (difficult with sqlite3)
- check if customer has overdue Rental then allow(add to uml)!
-Split Database commands based on type of User how may need them
-TIme Coversions
-Update Title to product
-ensure Command Class string formart is correct in order
-Redesign database on functions 
-ensure all ID are int

task
read TDD test driven development
add junit testing
Create flow of every command through system,what info will be needed from database & queries string,then update api documenation lucid chart
Tidy up database Command class along with baseCommand maby based on DML etc
create debuggin clienet register callback with API
finish todo 
think of threaded way where they start
think of the http or socket class linking to api or API being it


